{"version":3,"sources":["ts/login-app/validate.ts","ts/login-app/index.ts"],"names":[],"mappings":";;;AAKA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EALA,IAAM,EAA4C,CAChD,MAAO,wHACP,SAAU,qBAGZ,SAAgB,EAAS,GACjB,IAAA,EAAqB,EAAQ,QAAQ,SACvC,OAAC,EAAU,KACjB,QAAQ,IAAI,EAAU,GAAY,KAAK,EAAQ,QACtC,EAAU,GAAY,KAAK,EAAQ,QAJ5C,QAAA,SAAA;;ACmCC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxCD,QAAA,6BACA,IAAA,EAAA,QAAA,cACA,QAAA,oCAEA,IAAM,EAA0B,SAAS,cAAc,6BACjD,EAA+B,SAAS,cAAc,8BACtD,EAAkC,SAAS,cAAc,iCAE/D,QAAQ,IAAI,EAAQ,EAAe,GAEnC,IAAM,EAAQ,CAAC,EAAY,GAO3B,SAAS,IAOE,OANa,EAAM,KAAM,SAAA,IACT,EAAA,EAAA,UAAS,IAExB,EAAe,KAM3B,SAAS,EAAe,GACd,IAAA,EAAS,EAAQ,cAEjB,EAAW,EADD,EAAQ,QAAQ,SAAW,iBAE3C,EAAQ,UAAU,IAAI,cACtB,EAAO,mBAAmB,YAAa,GAI3C,SAAS,EAAc,GACZ,MAAA,uCAAA,OACyB,EAAO,gBA1B3C,EAAO,iBAAiB,SAAU,SAAA,GAC9B,EAAM,iBACN","file":"login-app.8aeb9abe.js","sourceRoot":"../src","sourcesContent":["const regExpDic:{email:RegExp, password:RegExp} = {\n  email: /^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{1,5}|[0-9]{1,3})(\\]?)$/,\n  password: /^[0-9a-zA-Z]{4,}$/,\n};\n\nexport function validate(element: HTMLInputElement): boolean {\n  const RegExpName: string = element.dataset.required;\n  if (!regExpDic[RegExpName]) return true;\nconsole.log(regExpDic[RegExpName].test(element.value))\n  return regExpDic[RegExpName].test(element.value);\n}\n\n","import '../../sass/login-app.scss'\nimport { validate } from './validate';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst formEl: HTMLFormElement = document.querySelector('.form-section__login-form');\nconst inputEmail: HTMLInputElement = document.querySelector('.form-section__input-email');\nconst inputPassword: HTMLInputElement = document.querySelector('.form-section__input-password');\n\nconsole.log(formEl, inputPassword, inputEmail);\n\nconst input = [inputEmail, inputPassword]\n\nformEl.addEventListener('submit', event => {\n    event.preventDefault()\n    onSubmit()\n})\n\nfunction onSubmit() {\n    const isFormValid = input.some((input => {\n        let isValidInput = validate(input)\n        if (!isValidInput) {\n            showInputError(input)\n        }\n    }))\n    return isFormValid\n}\n\nfunction showInputError(element) {\n    const parent = element.parentElement;\n    const message = element.dataset.message || 'Invalid input';\n    const template = inputErrorTpl(message)\n    element.classList.add('is-invalid')\n    parent.insertAdjacentHTML('beforeend', template)\n}\n\n\nfunction inputErrorTpl(message) {\n    return `\n    <div class=\"invalid-feedback\">${message}</div>\n    `\n}"]}